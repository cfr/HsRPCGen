- comment starts with dash
-
- # Method
- defined with met
- name is optional, remoteName is used if missing
- see type and return type grammar below
-
-     met remoteName returnType [name]
-      name type - first arg
-      ... - more arguments
-
- # Record
-
-     rec name
-      name varType [ = defaultValue] - same as type but with different
-                                     - optional default value
-      ...
-
- # Examples:

met ping Void

rec Credentials
   login  String? = "user"
   pass  String?

rec UserInfo YourProto
   age NSNumber?
   photoURLs  [String]?
   creds  Credentials?
   friends { String : UserInfo }
   name  String?

met user.login UserInfo login
   creds Credentials

met register Credentials
    username String
    password String

met test Void
    a1 Int
    a2 NSNumber?
    a3 Bool

- # Type grammar
- type → array-type | dictionary-type | type-identifier | optional-type | primitive-type
- returnType → type-identifier | Void
- primitive-var-type → String | NSNumber
- primitive-type → String | Int | Float | Bool | NSNumber
- array-type → [ type ]
- dictionary-type → { primitiveType : type }
- optional-type → type ?
- unwrapped-optional-type → type !

